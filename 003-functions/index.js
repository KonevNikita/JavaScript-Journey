// Функции - это один из способов переиспользования кода. Даже простейший вывод текста на экран - это сложная операция, которая
// требует несколько килобайтов машинного кода. Благодаря наличию функции console.log мы можем это делать легко.
//
// Предположим, что мы хотим поздороваться с несколькими людьми. Чтобы каждый раз не писать console.log('Hello <name>'), можно
// объявить функцию greet.

// Для функции greet: "greet" называется её именем или идентификатором аналогично имени или идентификатору переменной.
// name - это параметр функции, который при её вызове будет заменяться конкретным переданным значением - аргументом.
// Синтаксис между {} (braces) называется телом функции.
function greet(name) {
    // Строки с `` позволяют так называемую строковую интерполяцию - подстановку значения вместо синтаксиса ${<выражение>}.
    console.log(`Hello ${name}`);
}

// Вызов функции greet со строковым аргументом world.
greet('world');

// Функция greet не возвращает значения, она только исполняет код внутри своего тела. Для возвращения значения из функции или
// досрочного её завершения можно использовать ключевое слово return.

function double(n) {
    // Код в комментарии ниже удваивал бы строки.
    // return n+n;
    return 2*n;
}

console.log(double(8));
// Выведет NaN - не число
console.log(double('abba'));

// В JS есть и другие встроенные функции. Ещё один пример такой функции - Number(). Это функция от одного аргумента произвольного типа.

// Выведет 1
console.log(Number(true));
// Number от пустой строки выведет 0
console.log(Number(''));